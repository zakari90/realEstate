generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Agent {
  id            String       @id @default(uuid())
  clerkId       String?      @unique
  name          String?
  email         String?      @unique
  image         String?    
  phone         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  properties    Property[]
  investments    Investment[]
}

model Property {
  id              String    @id @default(uuid())
  type            String?
  state           String?
  status          Boolean?
  address         String?
  mapUrl          String?
  description     String?
  price           Int?  
  area            Int?
  bedrooms        Int?
  bathrooms       Int?
  agentId         String?
  video           String?
  panorama        String?
  images          String?    // Consider using a relation to a separate Image model if needed
  features        String?    // Could also be an array of strings or a separate model
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  offers          PropertyOffer[]
  agent           Agent?    @relation(fields: [agentId], references: [id])
}

model Investment {
  id                   String   @id @default(uuid())
  title                String
  description          String 
  status               Boolean?  // Changed to string for compatibility with SQLite
  price                Int?      // Total property price
  contribution         Int?      // Contributor's amount
  acceptedContributions Int?      // Total amount from accepted InvestmentOffers
  numContributors      Int?      // Number of additional contributors needed
  location             String?
  purpose              String?  // Changed to string for compatibility with SQLite
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  offers               InvestmentOffer[]
  agent                Agent?   @relation(fields: [agentId], references: [id])
  agentId              String?
}

model Client {
  id        String   @id @default(uuid())
  name      String
  email     String?  
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  offers    PropertyOffer?
  InvestmentOffer InvestmentOffer[]
}

model PropertyOffer {
  id         String    @id @default(uuid())
  amount     Int
  period     String
  propertyId String?
  clientId   String?   @unique
  createdAt  DateTime  @default(now())
  client     Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model InvestmentOffer {
  id             String      @id @default(uuid())
  amount         Int
  clientId       String?     @unique
  createdAt      DateTime    @default(now())
  client         Client?     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  investment     Investment? @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  investmentId   String
  accepted       Boolean?    @default(false) // New field to track acceptance status
}
