generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Agent {
  id            String       @id @default(uuid())  @map("_id")
  clerkId       String?      @unique
  name          String?
  email         String?      @unique
  image         String?    
  phone         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  properties    Property[]
  investments    Investment[]
}
model InvestmentVisitLog {
  id            String      @id @default(uuid()) @map("_id")
  location      String?
  investmentId  String
  visitedAt     DateTime    @default(now())
  investment    Investment  @relation(fields: [investmentId], references: [id])
}

model PropertyVisitLog {
  id            String      @id @default(uuid()) @map("_id")
  location      String?
  propertyId    String
  visitedAt     DateTime    @default(now())
  property      Property    @relation(fields: [propertyId], references: [id])
}

model Investment {
  id                   String      @id @default(uuid()) @map("_id")
  title                String
  description          String 
  status               Boolean? 
  price                Int?      
  contribution         Int?      
  acceptedContributions Int?     
  numContributors      Int?      
  location             String?
  purpose              String? 
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  offers               InvestmentOffer[]
  agent                Agent?   @relation(fields: [agentId], references: [id])
  agentId              String?  
  visitLogs            InvestmentVisitLog[]
}

model Property {
  id              String      @id @default(uuid()) @map("_id")
  type            String?
  state           String?
  status          Boolean?
  address         String?
  mapUrl          String?
  description     String?
  price           Int?  
  area            Int?
  bedrooms        Int?
  bathrooms       Int?
  agentId         String?
  video           String?
  panorama        String?
  images          String?    
  features        String?   
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  offers          PropertyOffer[]
  agent           Agent?     @relation(fields: [agentId], references: [id])
  visitLogs        PropertyVisitLog[]
}


model Client {
  id                String   @id @default(uuid()) @map("_id")
  name              String
  email             String?  
  phone             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  offers            PropertyOffer?
  investmentOffer   InvestmentOffer?
}

model PropertyOffer {
  id                String    @id @default(uuid()) @map("_id")
  amount            Int
  period            String
  propertyId        String?
  clientId          String?   @unique
  createdAt         DateTime  @default(now())
  client            Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property          Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model InvestmentOffer {
  id                String      @id @default(uuid()) @map("_id")
  amount            Int
  clientId          String?     @unique
  createdAt         DateTime    @default(now())
  client            Client?     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  investment        Investment? @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  investmentId      String
  accepted          Boolean?    @default(false) // New field to track acceptance status
}

model Visits {
  id           String         @id @default(uuid())  @map("_id")
  totalVisits  Int            @default(0)           // Counter for total visits
  pagePath     String         @unique               // Track the page being visited
  createdAt    DateTime       @default(now())       // When the entry was created
  updatedAt    DateTime       @updatedAt            // When the entry was last updated
  WebVisitLog  WebVisitLog[]  // Relates to detailed logs for each visit
}

model WebVisitLog {
  id            String   @id @default(uuid())  @map("_id")
  location      String?  // Store the location of the visit
  optionalData  String?  // Any optional metadata or details related to the visit
  visitsId      String   // Foreign key to Visits table
  visitedAt     DateTime @default(now())  // Timestamp of when the visit occurred
  visits        Visits   @relation(fields: [visitsId], references: [id])  // Relation to the Visits table
}

model Analytics {
  id        String      @id @default(uuid())  @map("_id")
  page      String
  ip        String?
  location  String?    
  duration  Int?     // Duration in seconds
  createdAt DateTime @default(now())
  clickData String?    // Store button clicks
}