generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Agents {
  id         String     @id @default(uuid())
  clerkId    String?    @unique
  name       String?
  email      String?    @unique
  phone      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  properties Property[]
}

model Property {
  id          String            @id @default(uuid())
  typeId      String?
  description String?
  price       Int?
  agentId     String?
  statusId    String?
  locationId  String?           @unique
  featureId   String?           @unique
  video       String?
  panorama    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  offers      Offer[]
  feature     PropertyFeature?  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  location    PropertyLocation? @relation(fields: [locationId], references: [id], onDelete: Cascade)
  status      PropertyStatus?   @relation(fields: [statusId], references: [id])
  agent       Agents?           @relation(fields: [agentId], references: [id])
  type        PropertyType?     @relation(fields: [typeId], references: [id])
  images      PropertyImage[]
}

model PropertyImage {
  id         String    @id @default(uuid())
  url        String?
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyFeature {
  id              String    @id @default(uuid())
  bedrooms        Int?
  bathrooms       Int?
  parkingSpots    Int?
  area            Int?
  hasSwimmingPool Boolean?
  hasGardenYard   Boolean?
  hasBalcony      Boolean?
  property        Property?
}

model PropertyLocation {
  id            String    @id @default(uuid())
  streetAddress String?
  city          String?
  state         String?
  zip           String?
  region        String?
  landmark      String?
  property      Property?
}

model PropertyType {
  id       String     @id @default(uuid())
  value    String?
  Property Property[]
}

model PropertyStatus {
  id       String     @id @default(uuid())
  value    String?
  Property Property[]
}

model Client {
  id        String   @id @default(uuid())
  name      String
  email     String?  @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  offers    Offer[]
}

model Offer {
  id         String    @id @default(uuid())
  propertyId String?
  clientId   String?
  createdAt  DateTime  @default(now())
  amount     Float?
  client     Client?   @relation(fields: [clientId], references: [id], onDelete: Restrict)
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}
